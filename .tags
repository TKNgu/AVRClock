!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/ngocpt/Work/AVRClock/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
ADDR_AUTO	ArduinoClock/TTSDisplay.h	/^#define ADDR_AUTO /;"	d
ADDR_FIXED	ArduinoClock/TTSDisplay.h	/^#define ADDR_FIXED /;"	d
ARDUINO_STREAMING	ArduinoClock/Streaming.h	/^#define ARDUINO_STREAMING$/;"	d
AutoLight	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^void AutoLight() {$/;"	f	typeref:typename:void
AutoLight	ArduinoClock/Utils.cpp	/^void AutoLight() {$/;"	f	typeref:typename:void
BRIGHTEST	ArduinoClock/TTSDisplay.h	/^#define BRIGHTEST /;"	d
BRIGHT_DARKEST	ArduinoClock/TTSDisplay.h	/^#define BRIGHT_DARKEST /;"	d
BRIGHT_TYPICAL	ArduinoClock/TTSDisplay.h	/^#define BRIGHT_TYPICAL /;"	d
BUZZER_DEVICE	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^#define BUZZER_DEVICE /;"	d	file:
BUZZER_DEVICE	ArduinoClock/Utils.cpp	/^#define BUZZER_DEVICE /;"	d	file:
Button	ArduinoClock/Button.hpp	/^} Button;$/;"	t	typeref:struct:__anon3c315ce40108
ButtonInit	ArduinoClock/Button.cpp	/^void ButtonInit(Button *button, Key key, void (*shortFn)(void), void (*longFn)(void)) {$/;"	f	typeref:typename:void
ButtonScan	ArduinoClock/Button.cpp	/^void ButtonScan(Button *button) {$/;"	f	typeref:typename:void
Button_hpp	ArduinoClock/Button.hpp	/^#define Button_hpp$/;"	d
Buzzer	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^void Buzzer() { tone(BUZZER_DEVICE, 2400, 60); }$/;"	f	typeref:typename:void
Buzzer	ArduinoClock/Utils.cpp	/^void Buzzer() { tone(BUZZER_DEVICE, 2400, 60); }$/;"	f	typeref:typename:void
CANCLE_TIME	/home/ngocpt/Work/AVRClock/ArduinoClock/HourEdit.cpp	/^#define CANCLE_TIME /;"	d	file:
CANCLE_TIME	/home/ngocpt/Work/AVRClock/ArduinoClock/MinEdit.cpp	/^#define CANCLE_TIME /;"	d	file:
CANCLE_TIME	/home/ngocpt/Work/AVRClock/ArduinoClock/MinutesEdit.cpp	/^#define CANCLE_TIME /;"	d	file:
CANCLE_TIME	ArduinoClock/HourEdit.cpp	/^#define CANCLE_TIME /;"	d	file:
CANCLE_TIME	ArduinoClock/MinEdit.cpp	/^#define CANCLE_TIME /;"	d	file:
CHECK_LIGHT_TASK	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^#define CHECK_LIGHT_TASK /;"	d	file:
CHECK_TEMPERATURE_TASK	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^#define CHECK_TEMPERATURE_TASK /;"	d	file:
ChangState	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^void ChangState(void (*reload)(void), void (*loop)(void)) {$/;"	f	typeref:typename:void
ChangState	ArduinoClock/Clock.cpp	/^void ChangState(void (*reload)(void), void (*loop)(void)) {$/;"	f	typeref:typename:void
Clear	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^void Clear() { display.clear(); }$/;"	f	typeref:typename:void
Clear	ArduinoClock/Utils.cpp	/^void Clear() { display.clear(); }$/;"	f	typeref:typename:void
Clkpin	ArduinoClock/TTSDisplay.h	/^    uchar Clkpin;$/;"	m	class:TTSDisplay	typeref:typename:uchar
ClockInit	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^void ClockInit() {$/;"	f	typeref:typename:void
ClockInit	ArduinoClock/Clock.cpp	/^void ClockInit() {$/;"	f	typeref:typename:void
ClockLoop	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^void ClockLoop() {$/;"	f	typeref:typename:void
ClockLoop	ArduinoClock/Clock.cpp	/^void ClockLoop() {$/;"	f	typeref:typename:void
ClockLoopOld	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^void ClockLoopOld() {$/;"	f	typeref:typename:void
ClockReload	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^int ClockReload() { return 0; }$/;"	f	typeref:typename:int
ClockReload	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^int ClockReload() {$/;"	f	typeref:typename:int
ClockReload	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^void ClockReload() {$/;"	f	typeref:typename:void
ClockReload	ArduinoClock/Clock.cpp	/^void ClockReload() {$/;"	f	typeref:typename:void
ClockShow	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^void ClockShow() {$/;"	f	typeref:typename:void
ClockShow	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^void ClockShow() {}$/;"	f	typeref:typename:void
ClockShowTime	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^void ClockShowTime(const unsigned char hour, const unsigned char min,$/;"	f	typeref:typename:void
ClockShowTime	ArduinoClock/Clock.cpp	/^void ClockShowTime(const unsigned char hour, const unsigned char min, const unsigned long startT/;"	f	typeref:typename:void
Clock_hpp	ArduinoClock/Clock.hpp	/^#define Clock_hpp$/;"	d
Cmd_Dispdisplay	ArduinoClock/TTSDisplay.h	/^    uchar Cmd_Dispdisplay;$/;"	m	class:TTSDisplay	typeref:typename:uchar
Cmd_SetAddr	ArduinoClock/TTSDisplay.h	/^    uchar Cmd_SetAddr;$/;"	m	class:TTSDisplay	typeref:typename:uchar
Cmd_SetData	ArduinoClock/TTSDisplay.h	/^    uchar Cmd_SetData;$/;"	m	class:TTSDisplay	typeref:typename:uchar
CreateButton	ArduinoClock/Button.cpp	/^Button CreateButton(const Key key, void (*shortFn)(void)) {$/;"	f	typeref:typename:Button
CreateButtonLongPress	ArduinoClock/Button.cpp	/^Button CreateButtonLongPress(const Key key, void (*shortFn)(void), void (*longFn)(void)) {$/;"	f	typeref:typename:Button
CreateTimer	/home/ngocpt/Work/AVRClock/ArduinoClock/Timer.c	/^Timer CreateTimer(unsigned long leng) {$/;"	f	typeref:typename:Timer
CreateTimer	/home/ngocpt/Work/AVRClock/ArduinoClock/Timer.cpp	/^Timer CreateTimer(unsigned long leng) {$/;"	f	typeref:typename:Timer
CreateTimer	ArduinoClock/Timer.cpp	/^Timer CreateTimer(unsigned long leng) {$/;"	f	typeref:typename:Timer
DAY	ArduinoClock/TTSTime.cpp	/^#define DAY /;"	d	file:
Datapin	ArduinoClock/TTSDisplay.h	/^    uchar Datapin;$/;"	m	class:TTSDisplay	typeref:typename:uchar
DowHour	/home/ngocpt/Work/AVRClock/ArduinoClock/HourEdit.cpp	/^void DowHour() {$/;"	f	typeref:typename:void
DowHour	ArduinoClock/HourEdit.cpp	/^void DowHour() {$/;"	f	typeref:typename:void
DowHourLong	/home/ngocpt/Work/AVRClock/ArduinoClock/HourEdit.cpp	/^void DowHourLong() {$/;"	f	typeref:typename:void
DowHourLong	ArduinoClock/HourEdit.cpp	/^void DowHourLong() {$/;"	f	typeref:typename:void
DowMin	/home/ngocpt/Work/AVRClock/ArduinoClock/MinEdit.cpp	/^void DowMin() {$/;"	f	typeref:typename:void
DowMin	/home/ngocpt/Work/AVRClock/ArduinoClock/MinutesEdit.cpp	/^void DowMin() {$/;"	f	typeref:typename:void
DowMin	ArduinoClock/MinEdit.cpp	/^void DowMin() {$/;"	f	typeref:typename:void
DowMinLong	/home/ngocpt/Work/AVRClock/ArduinoClock/MinEdit.cpp	/^void DowMinLong() {$/;"	f	typeref:typename:void
DowMinLong	/home/ngocpt/Work/AVRClock/ArduinoClock/MinutesEdit.cpp	/^void DowMinLong() {$/;"	f	typeref:typename:void
DowMinLong	ArduinoClock/MinEdit.cpp	/^void DowMinLong() {$/;"	f	typeref:typename:void
GetClock	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^void GetClock(unsigned char *hour, unsigned char *min) {$/;"	f	typeref:typename:void
GetClock	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^void GetClock(unsigned char* hour, unsigned char* min) {$/;"	f	typeref:typename:void
GetClock	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^void GetClock(unsigned int *hour, unsigned int *min) {$/;"	f	typeref:typename:void
GetDateTime	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^void GetDateTime(unsigned char *hour, unsigned char *min, unsigned char *sec,$/;"	f	typeref:typename:void
GetDateTime	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^void GetDateTime(unsigned char* hour, unsigned char* min, unsigned char* sec,$/;"	f	typeref:typename:void
GetDateTime	ArduinoClock/Utils.cpp	/^void GetDateTime(unsigned char *hour, unsigned char *min, unsigned char *sec,$/;"	f	typeref:typename:void
GetDayOfWeek	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^unsigned char GetDayOfWeek() {$/;"	f	typeref:typename:unsigned char
GetDayOfWeek	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^void GetDayOfWeek(unsigned char *dayOfWeek) {$/;"	f	typeref:typename:void
GetDayOfWeek	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^void GetDayOfWeek(unsigned char* dayOfWeek) {$/;"	f	typeref:typename:void
GetDayOfWeek	ArduinoClock/Utils.cpp	/^unsigned char GetDayOfWeek() {$/;"	f	typeref:typename:unsigned char
GetDayOfWeek	ArduinoClock/Utils.cpp	/^void GetDayOfWeek(unsigned char *dayOfWeek) {$/;"	f	typeref:typename:void
GetHour	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^unsigned char GetHour() { return time.getHour(); }$/;"	f	typeref:typename:unsigned char
GetHour	ArduinoClock/Utils.cpp	/^unsigned char GetHour() { return time.getHour(); }$/;"	f	typeref:typename:unsigned char
GetLight	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^int GetLight() { return analogRead(LIGHT); }$/;"	f	typeref:typename:int
GetLight	ArduinoClock/Utils.cpp	/^int GetLight() { return analogRead(LIGHT); }$/;"	f	typeref:typename:int
GetMin	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^unsigned char GetMin() { return time.getMin(); }$/;"	f	typeref:typename:unsigned char
GetMin	ArduinoClock/Utils.cpp	/^unsigned char GetMin() { return time.getMin(); }$/;"	f	typeref:typename:unsigned char
GetTem	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^int GetTem() { return temp.get(); }$/;"	f	typeref:typename:int
GetTem	ArduinoClock/Utils.cpp	/^int GetTem() { return temp.get(); }$/;"	f	typeref:typename:int
GetTemperature	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^int GetTemperature() { return temp.get(); }$/;"	f	typeref:typename:int
GetTime	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^void GetTime(unsigned char *hour, unsigned char *min, unsigned char *sec) {$/;"	f	typeref:typename:void
GetTime	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^void GetTime(unsigned char* hour, unsigned char* min, unsigned char* sec) {$/;"	f	typeref:typename:void
GetTime	ArduinoClock/Utils.cpp	/^void GetTime(unsigned char *hour, unsigned char *min, unsigned char *sec) {$/;"	f	typeref:typename:void
GetTimePoint	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^TimePoint GetTimePoint(TimePoint *now) {$/;"	f	typeref:typename:TimePoint
GetTimePoint	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^TimePoint GetTimePoint(TimePoint* now) {$/;"	f	typeref:typename:TimePoint
GetTimePoint	ArduinoClock/Utils.cpp	/^TimePoint GetTimePoint(TimePoint *now) {$/;"	f	typeref:typename:TimePoint
HOURLY_CHIME_SIZE	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^#define HOURLY_CHIME_SIZE /;"	d	file:
HOURLY_CHIME_TASK	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^#define HOURLY_CHIME_TASK /;"	d	file:
HOUR_BLINK	/home/ngocpt/Work/AVRClock/ArduinoClock/HourEdit.cpp	/^#define HOUR_BLINK /;"	d	file:
HardwareInit	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^void HardwareInit() {$/;"	f	typeref:typename:void
HardwareInit	ArduinoClock/Utils.cpp	/^void HardwareInit() {$/;"	f	typeref:typename:void
HourEditLoop	/home/ngocpt/Work/AVRClock/ArduinoClock/HourEdit.cpp	/^void HourEditLoop() {$/;"	f	typeref:typename:void
HourEditLoop	ArduinoClock/HourEdit.cpp	/^void HourEditLoop() {$/;"	f	typeref:typename:void
HourEditReload	/home/ngocpt/Work/AVRClock/ArduinoClock/HourEdit.cpp	/^int HourEditReload() {$/;"	f	typeref:typename:int
HourEditReload	/home/ngocpt/Work/AVRClock/ArduinoClock/HourEdit.cpp	/^void HourEditReload() { GetClock(&hour, &minutes); }$/;"	f	typeref:typename:void
HourEditReload	/home/ngocpt/Work/AVRClock/ArduinoClock/HourEdit.cpp	/^void HourEditReload() {$/;"	f	typeref:typename:void
HourEditReload	ArduinoClock/HourEdit.cpp	/^void HourEditReload() {$/;"	f	typeref:typename:void
HourEditShow	/home/ngocpt/Work/AVRClock/ArduinoClock/HourEdit.cpp	/^void HourEditShow() {$/;"	f	typeref:typename:void
HourEditShow	/home/ngocpt/Work/AVRClock/ArduinoClock/HourEdit.cpp	/^void HourEditShow() {}$/;"	f	typeref:typename:void
I2CADDR	ArduinoClock/TTSTime.cpp	/^#define I2CADDR /;"	d	file:
INDEX_BLANK	ArduinoClock/TTSDisplay.h	/^#define INDEX_BLANK /;"	d
INDEX_NEGATIVE_SIGH	ArduinoClock/TTSDisplay.h	/^#define INDEX_NEGATIVE_SIGH /;"	d
InitClock	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^int InitClock() { return 0; }$/;"	f	typeref:typename:int
InitClock	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^int InitClock() {$/;"	f	typeref:typename:int
InitHourEdit	/home/ngocpt/Work/AVRClock/ArduinoClock/HourEdit.cpp	/^int InitHourEdit() {$/;"	f	typeref:typename:int
InitSWScheduler	/home/ngocpt/Work/AVRClock/ArduinoClock/SWScheduler.cpp	/^int InitSWScheduler(struct SWScheduler* swScheduler) {$/;"	f	typeref:typename:int
InitSchedule	/home/ngocpt/Work/AVRClock/ArduinoClock/Schedule.c	/^int InitSchedule(unsigned char numberSchedule, unsigned int minTime) {$/;"	f	typeref:typename:int
InitSchedule	/home/ngocpt/Work/AVRClock/ArduinoClock/Schedule.c	/^void InitSchedule(unsigned char numberSchedule, unsigned int minTime) {$/;"	f	typeref:typename:void
InitSchedule	/home/ngocpt/Work/AVRClock/ArduinoClock/Scheduler.c	/^int InitSchedule(unsigned char numberSchedule, unsigned int minTime) {$/;"	f	typeref:typename:int
InitScheduler	/home/ngocpt/Work/AVRClock/ArduinoClock/Scheduler.c	/^int InitScheduler(unsigned char numberSchedule, unsigned int minTime) {$/;"	f	typeref:typename:int
InitScheduler	/home/ngocpt/Work/AVRClock/ArduinoClock/Scheduler.cpp	/^int InitScheduler(unsigned char numberSchedule, unsigned int minTime) {$/;"	f	typeref:typename:int
InitScheduler	/home/ngocpt/Work/AVRClock/ArduinoClock/Scheduler.cpp	/^int InitScheduler(unsigned char numberSchedule, unsigned long minTime) {$/;"	f	typeref:typename:int
InitStateManager	/home/ngocpt/Work/AVRClock/ArduinoClock/StateManager.cpp	/^int InitStateManager(unsigned char size) {$/;"	f	typeref:typename:int
InitStateManager	/home/ngocpt/Work/AVRClock/ArduinoClock/StateManager.cpp	/^int InitStateManager(unsigned char size) {}$/;"	f	typeref:typename:int
InitTimePoint	ArduinoClock/TimePoint.cpp	/^void InitTimePoint(TimePoint *timePoint,$/;"	f	typeref:typename:void
InterruptdCallBack	/home/ngocpt/Work/AVRClock/ArduinoClock/Scheduler.c	/^void InterruptdCallBack() {$/;"	f	typeref:typename:void
InterruptdCallBack	/home/ngocpt/Work/AVRClock/ArduinoClock/Scheduler.cpp	/^void InterruptdCallBack() {$/;"	f	typeref:typename:void
KEEP_TEMPERATURE_TIMEOUT	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^#define KEEP_TEMPERATURE_TIMEOUT /;"	d	file:
Key	ArduinoClock/Utils.hpp	/^} Key;$/;"	t	typeref:enum:__anon04348c590103
LIGHT	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^#define LIGHT /;"	d	file:
LIGHT	ArduinoClock/Utils.cpp	/^#define LIGHT /;"	d	file:
LONG_PRESS	ArduinoClock/Button.hpp	/^#define LONG_PRESS /;"	d
Led	ArduinoClock/Utils.hpp	/^} Led;$/;"	t	typeref:enum:__anon04348c590203
LedOff	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^void LedOff(const Led led) { digitalWrite(led, LOW); }$/;"	f	typeref:typename:void
LedOff	ArduinoClock/Utils.cpp	/^void LedOff(const Led led) { digitalWrite(led, LOW); }$/;"	f	typeref:typename:void
LedOn	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^void LedOn(const Led led) { digitalWrite(led, HIGH); }$/;"	f	typeref:typename:void
LedOn	ArduinoClock/Utils.cpp	/^void LedOn(const Led led) { digitalWrite(led, HIGH); }$/;"	f	typeref:typename:void
MAX_TEMPERATURE	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^#define MAX_TEMPERATURE /;"	d	file:
MIN_TEMPERATURE	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^#define MIN_TEMPERATURE /;"	d	file:
MONTH	ArduinoClock/TTSTime.cpp	/^#define MONTH /;"	d	file:
MenuClick	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^void MenuClick() { ChangState(HourEditReload, HourEditLoop); }$/;"	f	typeref:typename:void
MenuClick	ArduinoClock/Clock.cpp	/^void MenuClick() {$/;"	f	typeref:typename:void
MinEditLoop	/home/ngocpt/Work/AVRClock/ArduinoClock/MinEdit.cpp	/^void MinEditLoop() {$/;"	f	typeref:typename:void
MinEditLoop	/home/ngocpt/Work/AVRClock/ArduinoClock/MinutesEdit.cpp	/^void MinEditLoop() {$/;"	f	typeref:typename:void
MinEditLoop	ArduinoClock/MinEdit.cpp	/^void MinEditLoop() {$/;"	f	typeref:typename:void
MinEditReload	/home/ngocpt/Work/AVRClock/ArduinoClock/MinEdit.cpp	/^void MinEditReload() {$/;"	f	typeref:typename:void
MinEditReload	/home/ngocpt/Work/AVRClock/ArduinoClock/MinutesEdit.cpp	/^void MinEditReload() {$/;"	f	typeref:typename:void
MinEditReload	ArduinoClock/MinEdit.cpp	/^void MinEditReload() {$/;"	f	typeref:typename:void
MinutesEditLoop	/home/ngocpt/Work/AVRClock/ArduinoClock/MinutesEdit.cpp	/^void MinutesEditLoop() {$/;"	f	typeref:typename:void
MinutesEditReload	/home/ngocpt/Work/AVRClock/ArduinoClock/MinutesEdit.cpp	/^void MinutesEditReload() {$/;"	f	typeref:typename:void
NOP	ArduinoClock/Button.cpp	/^void NOP() {}$/;"	f	typeref:typename:void
PINCLK	ArduinoClock/TTSDisplay.cpp	/^#define PINCLK /;"	d	file:
PINDTA	ArduinoClock/TTSDisplay.cpp	/^#define PINDTA /;"	d	file:
PINTEMP	ArduinoClock/TTSTemp.h	/^#define PINTEMP /;"	d
POINT_OFF	ArduinoClock/TTSDisplay.h	/^#define POINT_OFF /;"	d
POINT_ON	ArduinoClock/TTSDisplay.h	/^#define POINT_ON /;"	d
PointOff	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^void (*PointOff)() = display.pointOff;$/;"	v	typeref:typename:void (*)()
PointOff	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^void PointOff() { display.pointOff(); }$/;"	f	typeref:typename:void
PointOff	ArduinoClock/Utils.cpp	/^void PointOff() { display.pointOff(); }$/;"	f	typeref:typename:void
PointOn	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^void (*PointOn)() = display.pointOn;$/;"	v	typeref:typename:void (*)()
PointOn	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^void PointOn() { display.pointOn(); }$/;"	f	typeref:typename:void
PointOn	ArduinoClock/Utils.cpp	/^void PointOn() { display.pointOn(); }$/;"	f	typeref:typename:void
ReadKey	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^bool ReadKey(const Key key) { return digitalRead(key) == LOW; }$/;"	f	typeref:typename:bool
ReadKey	ArduinoClock/Utils.cpp	/^bool ReadKey(const Key key) { return digitalRead(key) == LOW; }$/;"	f	typeref:typename:bool
ReleaseSWScheduler	/home/ngocpt/Work/AVRClock/ArduinoClock/SWScheduler.cpp	/^void ReleaseSWScheduler(struct SWScheduler* swScheduler) {$/;"	f	typeref:typename:void
ReleaseSWScheduler	/home/ngocpt/Work/AVRClock/ArduinoClock/SWScheduler.cpp	/^void ReleaseSWScheduler(struct SWScheduler* swScheduler) {}$/;"	f	typeref:typename:void
ReleaseSchedule	/home/ngocpt/Work/AVRClock/ArduinoClock/Schedule.c	/^void ReleaseSchedule() { free(schedules); }$/;"	f	typeref:typename:void
ReleaseSchedule	/home/ngocpt/Work/AVRClock/ArduinoClock/Scheduler.c	/^void ReleaseSchedule() { free(schedules); }$/;"	f	typeref:typename:void
ReleaseScheduler	/home/ngocpt/Work/AVRClock/ArduinoClock/Scheduler.c	/^void ReleaseScheduler() { free(scheduleTasks); }$/;"	f	typeref:typename:void
ReleaseScheduler	/home/ngocpt/Work/AVRClock/ArduinoClock/Scheduler.cpp	/^void ReleaseScheduler() { free(scheduleTasks); }$/;"	f	typeref:typename:void
SCHEDULE_SIZE	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^#define SCHEDULE_SIZE /;"	d	file:
SCHEDULE_SIZE	ArduinoClock/Clock.cpp	/^#define SCHEDULE_SIZE /;"	d	file:
SHORT_PRESS	ArduinoClock/Button.hpp	/^#define SHORT_PRESS /;"	d
SHOW_TEMPERATURE_LONG	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^#define SHOW_TEMPERATURE_LONG /;"	d	file:
SLEEP_TIME	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^#define SLEEP_TIME /;"	d	file:
SLEEP_TIME	/home/ngocpt/Work/AVRClock/ArduinoClock/HourEdit.cpp	/^#define SLEEP_TIME /;"	d	file:
SLEEP_TIME	/home/ngocpt/Work/AVRClock/ArduinoClock/MinEdit.cpp	/^#define SLEEP_TIME /;"	d	file:
SLEEP_TIME	/home/ngocpt/Work/AVRClock/ArduinoClock/MinutesEdit.cpp	/^#define SLEEP_TIME /;"	d	file:
SLEEP_TIME	ArduinoClock/Clock.cpp	/^#define SLEEP_TIME /;"	d	file:
SLEEP_TIME	ArduinoClock/HourEdit.cpp	/^#define SLEEP_TIME /;"	d	file:
SLEEP_TIME	ArduinoClock/MinEdit.cpp	/^#define SLEEP_TIME /;"	d	file:
STARTADDR	ArduinoClock/TTSDisplay.h	/^#define STARTADDR /;"	d
STREAMING_LIBRARY_VERSION	ArduinoClock/Streaming.h	/^#define STREAMING_LIBRARY_VERSION /;"	d
SWSchedulerTick	/home/ngocpt/Work/AVRClock/ArduinoClock/SWScheduler.cpp	/^void SWSchedulerTick(struct SWScheduler* swScheduler) {$/;"	f	typeref:typename:void
SWSchedulerTick	/home/ngocpt/Work/AVRClock/ArduinoClock/SWScheduler.cpp	/^void SWSchedulerTick(unsigned long now) {}$/;"	f	typeref:typename:void
SWSchedulerTickAuto	/home/ngocpt/Work/AVRClock/ArduinoClock/SWScheduler.cpp	/^void SWSchedulerTickAuto() {}$/;"	f	typeref:typename:void
SWSchedulerTickFix	/home/ngocpt/Work/AVRClock/ArduinoClock/SWScheduler.cpp	/^void SWSchedulerTickFix(struct SWScheduler* swScheduler, unsigned long now) {$/;"	f	typeref:typename:void
Save	/home/ngocpt/Work/AVRClock/ArduinoClock/HourEdit.cpp	/^void Save() {$/;"	f	typeref:typename:void
SaveHour	/home/ngocpt/Work/AVRClock/ArduinoClock/HourEdit.cpp	/^void SaveHour() {$/;"	f	typeref:typename:void
SaveHour	ArduinoClock/HourEdit.cpp	/^void SaveHour() {$/;"	f	typeref:typename:void
SaveHourSkip	/home/ngocpt/Work/AVRClock/ArduinoClock/HourEdit.cpp	/^void SaveHourSkip() {$/;"	f	typeref:typename:void
SaveHourSkip	/home/ngocpt/Work/AVRClock/ArduinoClock/MinutesEdit.cpp	/^void SaveHourSkip() {$/;"	f	typeref:typename:void
SaveHourSkip	ArduinoClock/HourEdit.cpp	/^void SaveHourSkip() {$/;"	f	typeref:typename:void
SaveMin	/home/ngocpt/Work/AVRClock/ArduinoClock/MinEdit.cpp	/^void SaveMin() {$/;"	f	typeref:typename:void
SaveMin	/home/ngocpt/Work/AVRClock/ArduinoClock/MinutesEdit.cpp	/^void SaveMin() {$/;"	f	typeref:typename:void
SaveMin	ArduinoClock/MinEdit.cpp	/^void SaveMin() {$/;"	f	typeref:typename:void
SaveMinSkip	/home/ngocpt/Work/AVRClock/ArduinoClock/MinutesEdit.cpp	/^void SaveMinSkip() {$/;"	f	typeref:typename:void
ScheduleTask	/home/ngocpt/Work/AVRClock/ArduinoClock/Schedule.c	/^void ScheduleTask() {$/;"	f	typeref:typename:void
ScheduleTask	/home/ngocpt/Work/AVRClock/ArduinoClock/Scheduler.c	/^void ScheduleTask() {$/;"	f	typeref:typename:void
SchedulerSetTask	/home/ngocpt/Work/AVRClock/ArduinoClock/Scheduler.cpp	/^int SchedulerSetTask(unsigned char index, ScheduleTask task) {$/;"	f	typeref:typename:int
SetDateTime	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^void SetDateTime(const unsigned char hour, const unsigned char min,$/;"	f	typeref:typename:void
SetDateTime	ArduinoClock/Utils.cpp	/^void SetDateTime(const unsigned char hour, const unsigned char min,$/;"	f	typeref:typename:void
SetDayOfWeek	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^void SetDayOfWeek(const unsigned char dayOfWeek) {$/;"	f	typeref:typename:void
SetDayOfWeek	ArduinoClock/Utils.cpp	/^void SetDayOfWeek(const unsigned char dayOfWeek) {$/;"	f	typeref:typename:void
SetLightLevel	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^void SetLightLevel(unsigned char level) { display.set(level, 0x40, 0xc0); }$/;"	f	typeref:typename:void
SetLightLevel	ArduinoClock/Utils.cpp	/^void SetLightLevel(unsigned char level) { display.set(level, 0x40, 0xc0); }$/;"	f	typeref:typename:void
SetTask	/home/ngocpt/Work/AVRClock/ArduinoClock/Scheduler.cpp	/^int SetTask(unsigned char index, ScheduleTask task) {$/;"	f	typeref:typename:int
SetTime	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^void SetTime(const unsigned char hour, const unsigned char min) {$/;"	f	typeref:typename:void
SetTime	ArduinoClock/Utils.cpp	/^void SetTime(const unsigned char hour, const unsigned char min) {$/;"	f	typeref:typename:void
ShowDayOfWeek	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^void ShowDayOfWeek(const unsigned char dayOfWeek) {$/;"	f	typeref:typename:void
ShowDayOfWeek	ArduinoClock/Utils.cpp	/^void ShowDayOfWeek(const unsigned char dayOfWeek) {$/;"	f	typeref:typename:void
ShowHour	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^void ShowHour(const unsigned char hour) {$/;"	f	typeref:typename:void
ShowHour	ArduinoClock/Utils.cpp	/^void ShowHour(const unsigned char hour) {$/;"	f	typeref:typename:void
ShowMin	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^void ShowMin(const unsigned char min) {$/;"	f	typeref:typename:void
ShowMin	ArduinoClock/Utils.cpp	/^void ShowMin(const unsigned char min) {$/;"	f	typeref:typename:void
ShowNum	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^void ShowNum(int num) { display.num(num); }$/;"	f	typeref:typename:void
ShowNum	ArduinoClock/Utils.cpp	/^void ShowNum(int num) { display.num(num); }$/;"	f	typeref:typename:void
ShowTemperature	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^void ShowTemperature(int temperature) {$/;"	f	typeref:typename:void
ShowTemperature	ArduinoClock/Utils.cpp	/^void ShowTemperature(int temperature) {$/;"	f	typeref:typename:void
ShowTime	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^void ShowTime(unsigned char hour, unsigned char min) {$/;"	f	typeref:typename:void
ShowTime	ArduinoClock/Utils.cpp	/^void ShowTime(unsigned char hour, unsigned char min) {$/;"	f	typeref:typename:void
StateLoop	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^void (*StateLoop)(void) = ClockLoop;$/;"	v	typeref:typename:void (*)(void)
StateLoop	ArduinoClock/Clock.cpp	/^void (*StateLoop)(void) = ClockLoop;$/;"	v	typeref:typename:void (*)(void)
StateManagerChangState	/home/ngocpt/Work/AVRClock/ArduinoClock/StateManager.cpp	/^void StateManagerChangState(unsigned char index) {$/;"	f	typeref:typename:void
StateManagerLoop	/home/ngocpt/Work/AVRClock/ArduinoClock/StateManager.cpp	/^void StateManagerLoop() { states[indexState].Loop(); }$/;"	f	typeref:typename:void
StateManagerNextSate	/home/ngocpt/Work/AVRClock/ArduinoClock/StateManager.cpp	/^void StateManagerNextSate() { indexState = ++indexState % stateSize; }$/;"	f	typeref:typename:void
StateManagerNextSate	/home/ngocpt/Work/AVRClock/ArduinoClock/StateManager.cpp	/^void StateManagerNextSate() {$/;"	f	typeref:typename:void
StateManagerNextState	/home/ngocpt/Work/AVRClock/ArduinoClock/StateManager.cpp	/^void StateManagerNextState() {$/;"	f	typeref:typename:void
StateManagerSetState	/home/ngocpt/Work/AVRClock/ArduinoClock/StateManager.cpp	/^int StateManagerSetState(unsigned char index, struct State state) {$/;"	f	typeref:typename:int
StateManagerStartState	/home/ngocpt/Work/AVRClock/ArduinoClock/StateManager.cpp	/^void StateManagerStartState() { StateManagerChangState(0); }$/;"	f	typeref:typename:void
StateManagerStartState	/home/ngocpt/Work/AVRClock/ArduinoClock/StateManager.cpp	/^void StateManagerStartState() { indexState = 0; }$/;"	f	typeref:typename:void
StateView	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^typedef enum StateView {$/;"	g	file:
StateView	ArduinoClock/Clock.cpp	/^typedef enum StateView {$/;"	g	file:
TIME_POIT_TASK	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^#define TIME_POIT_TASK /;"	d	file:
TIME_VIEW_TEMP	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^#define TIME_VIEW_TEMP /;"	d	file:
TIME_VIEW_TEMP	ArduinoClock/Clock.cpp	/^#define TIME_VIEW_TEMP /;"	d	file:
TIME_VIEW_TIME	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^#define TIME_VIEW_TIME /;"	d	file:
TIME_VIEW_TIME	ArduinoClock/Clock.cpp	/^#define TIME_VIEW_TIME /;"	d	file:
TTSDisplay	ArduinoClock/TTSDisplay.cpp	/^TTSDisplay::TTSDisplay() {$/;"	f	class:TTSDisplay
TTSDisplay	ArduinoClock/TTSDisplay.h	/^class TTSDisplay {$/;"	c
TTSDisplay::Clkpin	ArduinoClock/TTSDisplay.h	/^    uchar Clkpin;$/;"	m	class:TTSDisplay	typeref:typename:uchar
TTSDisplay::Cmd_Dispdisplay	ArduinoClock/TTSDisplay.h	/^    uchar Cmd_Dispdisplay;$/;"	m	class:TTSDisplay	typeref:typename:uchar
TTSDisplay::Cmd_SetAddr	ArduinoClock/TTSDisplay.h	/^    uchar Cmd_SetAddr;$/;"	m	class:TTSDisplay	typeref:typename:uchar
TTSDisplay::Cmd_SetData	ArduinoClock/TTSDisplay.h	/^    uchar Cmd_SetData;$/;"	m	class:TTSDisplay	typeref:typename:uchar
TTSDisplay::Datapin	ArduinoClock/TTSDisplay.h	/^    uchar Datapin;$/;"	m	class:TTSDisplay	typeref:typename:uchar
TTSDisplay::TTSDisplay	ArduinoClock/TTSDisplay.cpp	/^TTSDisplay::TTSDisplay() {$/;"	f	class:TTSDisplay
TTSDisplay::_PointFlag	ArduinoClock/TTSDisplay.h	/^    uchar _PointFlag;  \/\/_PointFlag=1:the clock point on$/;"	m	class:TTSDisplay	typeref:typename:uchar
TTSDisplay::_brightness	ArduinoClock/TTSDisplay.h	/^    uchar _brightness;$/;"	m	class:TTSDisplay	typeref:typename:uchar
TTSDisplay::clear	ArduinoClock/TTSDisplay.cpp	/^void TTSDisplay::clear() {$/;"	f	class:TTSDisplay	typeref:typename:void
TTSDisplay::coding	ArduinoClock/TTSDisplay.cpp	/^uchar TTSDisplay::coding(uchar DispData) {$/;"	f	class:TTSDisplay	typeref:typename:uchar
TTSDisplay::display	ArduinoClock/TTSDisplay.cpp	/^void TTSDisplay::display(uchar loca, uchar dta) {$/;"	f	class:TTSDisplay	typeref:typename:void
TTSDisplay::dtaDisplay	ArduinoClock/TTSDisplay.h	/^    uchar dtaDisplay[4];$/;"	m	class:TTSDisplay	typeref:typename:uchar[4]
TTSDisplay::num	ArduinoClock/TTSDisplay.cpp	/^void TTSDisplay::num(int dta) {$/;"	f	class:TTSDisplay	typeref:typename:void
TTSDisplay::pointOff	ArduinoClock/TTSDisplay.cpp	/^void TTSDisplay::pointOff() {$/;"	f	class:TTSDisplay	typeref:typename:void
TTSDisplay::pointOn	ArduinoClock/TTSDisplay.cpp	/^void TTSDisplay::pointOn() {$/;"	f	class:TTSDisplay	typeref:typename:void
TTSDisplay::raw	ArduinoClock/TTSDisplay.cpp	/^void TTSDisplay::raw(uchar loca, uchar dta) {$/;"	f	class:TTSDisplay	typeref:typename:void
TTSDisplay::set	ArduinoClock/TTSDisplay.cpp	/^void TTSDisplay::set(uchar brightness, uchar SetData, uchar SetAddr) {$/;"	f	class:TTSDisplay	typeref:typename:void
TTSDisplay::start	ArduinoClock/TTSDisplay.cpp	/^void TTSDisplay::start(void) {$/;"	f	class:TTSDisplay	typeref:typename:void
TTSDisplay::stop	ArduinoClock/TTSDisplay.cpp	/^void TTSDisplay::stop(void) {$/;"	f	class:TTSDisplay	typeref:typename:void
TTSDisplay::time	ArduinoClock/TTSDisplay.cpp	/^void TTSDisplay::time(uchar hour, uchar min) {$/;"	f	class:TTSDisplay	typeref:typename:void
TTSDisplay::writeByte	ArduinoClock/TTSDisplay.cpp	/^void TTSDisplay::writeByte(uchar wr_data) {$/;"	f	class:TTSDisplay	typeref:typename:void
TTSTemp	ArduinoClock/TTSTemp.h	/^    TTSTemp()$/;"	f	class:TTSTemp
TTSTemp	ArduinoClock/TTSTemp.h	/^class TTSTemp{$/;"	c
TTSTemp::TTSTemp	ArduinoClock/TTSTemp.h	/^    TTSTemp()$/;"	f	class:TTSTemp
TTSTemp::__pin	ArduinoClock/TTSTemp.h	/^    int __pin;$/;"	m	class:TTSTemp	typeref:typename:int
TTSTemp::get	ArduinoClock/TTSTemp.h	/^    int get()                                   \/\/ get temperature$/;"	f	class:TTSTemp	typeref:typename:int
TTSTime	ArduinoClock/TTSTime.h	/^ TTSTime() { Wire.begin(); }$/;"	f	class:TTSTime
TTSTime	ArduinoClock/TTSTime.h	/^class TTSTime {$/;"	c
TTSTime::TTSTime	ArduinoClock/TTSTime.h	/^ TTSTime() { Wire.begin(); }$/;"	f	class:TTSTime
TTSTime::bcdToDec	ArduinoClock/TTSTime.cpp	/^uchar TTSTime::bcdToDec(uchar val) { return ((val \/ 16 * 10) + (val % 16)); }$/;"	f	class:TTSTime	typeref:typename:uchar
TTSTime::decToBcd	ArduinoClock/TTSTime.cpp	/^uchar TTSTime::decToBcd(uchar val) { return ((val \/ 10 * 16) + (val % 10)); }$/;"	f	class:TTSTime	typeref:typename:uchar
TTSTime::getHour	ArduinoClock/TTSTime.cpp	/^uchar TTSTime::getHour() {$/;"	f	class:TTSTime	typeref:typename:uchar
TTSTime::getMin	ArduinoClock/TTSTime.cpp	/^uchar TTSTime::getMin() {$/;"	f	class:TTSTime	typeref:typename:uchar
TTSTime::getSec	ArduinoClock/TTSTime.cpp	/^uchar TTSTime::getSec() {$/;"	f	class:TTSTime	typeref:typename:uchar
TTSTime::getTime	ArduinoClock/TTSTime.cpp	/^void TTSTime::getTime(uchar *hour, uchar *min, uchar *sec) {$/;"	f	class:TTSTime	typeref:typename:void
TTSTime::getTime	ArduinoClock/TTSTime.cpp	/^void TTSTime::getTime(uchar *hour, uchar *min, uchar *sec, uchar *dayOfWeek, uchar *dayOfMonth, /;"	f	class:TTSTime	typeref:typename:void
TTSTime::setTime	ArduinoClock/TTSTime.cpp	/^void TTSTime::setTime(uchar hour, uchar min, uchar sec) {$/;"	f	class:TTSTime	typeref:typename:void
TTSTime::setTime	ArduinoClock/TTSTime.cpp	/^void TTSTime::setTime(uchar hour, uchar min, uchar sec, uchar dayOfWeek, uchar dayOfMonth, uchar/;"	f	class:TTSTime	typeref:typename:void
TimePoint	ArduinoClock/TimePoint.hpp	/^typedef unsigned int TimePoint;$/;"	t	typeref:typename:unsigned int
TimePoint_hpp	ArduinoClock/TimePoint.hpp	/^#define TimePoint_hpp$/;"	d
Timer	ArduinoClock/Timer.hpp	/^} Timer;$/;"	t	typeref:struct:__anon8c66b3c90108
TimerTimeout	/home/ngocpt/Work/AVRClock/ArduinoClock/Timer.c	/^bool TimerTimeout(Timer *timer) {$/;"	f	typeref:typename:bool
TimerTimeout	/home/ngocpt/Work/AVRClock/ArduinoClock/Timer.c	/^bool TimerTimeout(Timer* timer) { return TimerTimeoutFix(timer, millis()); }$/;"	f	typeref:typename:bool
TimerTimeout	/home/ngocpt/Work/AVRClock/ArduinoClock/Timer.cpp	/^bool TimerTimeout(Timer* timer) { return TimerTimeoutFix(timer, millis()); }$/;"	f	typeref:typename:bool
TimerTimeout	ArduinoClock/Timer.cpp	/^bool TimerTimeout(Timer *timer) {$/;"	f	typeref:typename:bool
TimerTimeoutFix	/home/ngocpt/Work/AVRClock/ArduinoClock/Timer.c	/^bool TimerTimeoutFix(Timer *timer, unsigned long timeNow) {$/;"	f	typeref:typename:bool
TimerTimeoutFix	/home/ngocpt/Work/AVRClock/ArduinoClock/Timer.c	/^bool TimerTimeoutFix(Timer* timer, unsigned long timeNow) {$/;"	f	typeref:typename:bool
TimerTimeoutFix	/home/ngocpt/Work/AVRClock/ArduinoClock/Timer.cpp	/^bool TimerTimeoutFix(Timer* timer, unsigned long timeNow) {$/;"	f	typeref:typename:bool
TimerTimeoutFix	ArduinoClock/Timer.cpp	/^bool TimerTimeoutFix(Timer *timer, unsigned long timeNow) {$/;"	f	typeref:typename:bool
Timer_hpp	ArduinoClock/Timer.hpp	/^#define Timer_hpp$/;"	d
TubeTab	ArduinoClock/TTSDisplay.cpp	/^const uchar TubeTab[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f,$/;"	v	typeref:typename:const uchar[]
UPDATE_TIME_TASK	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^#define UPDATE_TIME_TASK /;"	d	file:
UpHour	/home/ngocpt/Work/AVRClock/ArduinoClock/HourEdit.cpp	/^void UpHour() {$/;"	f	typeref:typename:void
UpHour	ArduinoClock/HourEdit.cpp	/^void UpHour() {$/;"	f	typeref:typename:void
UpHourLong	/home/ngocpt/Work/AVRClock/ArduinoClock/HourEdit.cpp	/^void UpHourLong() {$/;"	f	typeref:typename:void
UpHourLong	ArduinoClock/HourEdit.cpp	/^void UpHourLong() {$/;"	f	typeref:typename:void
UpMin	/home/ngocpt/Work/AVRClock/ArduinoClock/MinEdit.cpp	/^void UpMin() {$/;"	f	typeref:typename:void
UpMin	/home/ngocpt/Work/AVRClock/ArduinoClock/MinutesEdit.cpp	/^void UpMin() {$/;"	f	typeref:typename:void
UpMin	ArduinoClock/MinEdit.cpp	/^void UpMin() {$/;"	f	typeref:typename:void
UpMinLong	/home/ngocpt/Work/AVRClock/ArduinoClock/MinEdit.cpp	/^void UpMinLong() {$/;"	f	typeref:typename:void
UpMinLong	/home/ngocpt/Work/AVRClock/ArduinoClock/MinutesEdit.cpp	/^void UpMinLong() {$/;"	f	typeref:typename:void
UpMinLong	ArduinoClock/MinEdit.cpp	/^void UpMinLong() {$/;"	f	typeref:typename:void
Utils_hpp	ArduinoClock/Utils.hpp	/^#define Utils_hpp$/;"	d
WEEK	ArduinoClock/TTSTime.cpp	/^#define WEEK /;"	d	file:
YEAR	ArduinoClock/TTSTime.cpp	/^#define YEAR /;"	d	file:
_BASED	ArduinoClock/Streaming.h	/^  _BASED(long v, int b) : val(v), base(b) {}$/;"	f	struct:_BASED
_BASED	ArduinoClock/Streaming.h	/^struct _BASED {$/;"	s
_BASED::_BASED	ArduinoClock/Streaming.h	/^  _BASED(long v, int b) : val(v), base(b) {}$/;"	f	struct:_BASED
_BASED::base	ArduinoClock/Streaming.h	/^  int base;$/;"	m	struct:_BASED	typeref:typename:int
_BASED::val	ArduinoClock/Streaming.h	/^  long val;$/;"	m	struct:_BASED	typeref:typename:long
_BIN	ArduinoClock/Streaming.h	/^#define _BIN(/;"	d
_BYTE	ArduinoClock/Streaming.h	/^#define _BYTE(/;"	d
_BYTE_CODE	ArduinoClock/Streaming.h	/^  _BYTE_CODE(byte v) : val(v) {}$/;"	f	struct:_BYTE_CODE
_BYTE_CODE	ArduinoClock/Streaming.h	/^struct _BYTE_CODE {$/;"	s
_BYTE_CODE::_BYTE_CODE	ArduinoClock/Streaming.h	/^  _BYTE_CODE(byte v) : val(v) {}$/;"	f	struct:_BYTE_CODE
_BYTE_CODE::val	ArduinoClock/Streaming.h	/^  byte val;$/;"	m	struct:_BYTE_CODE	typeref:typename:byte
_DEC	ArduinoClock/Streaming.h	/^#define _DEC(/;"	d
_EndLineCode	ArduinoClock/Streaming.h	/^enum _EndLineCode { endl };$/;"	g
_FLOAT	ArduinoClock/Streaming.h	/^  _FLOAT(double v, int d) : val(v), digits(d) {}$/;"	f	struct:_FLOAT
_FLOAT	ArduinoClock/Streaming.h	/^struct _FLOAT {$/;"	s
_FLOAT::_FLOAT	ArduinoClock/Streaming.h	/^  _FLOAT(double v, int d) : val(v), digits(d) {}$/;"	f	struct:_FLOAT
_FLOAT::digits	ArduinoClock/Streaming.h	/^  int digits;$/;"	m	struct:_FLOAT	typeref:typename:int
_FLOAT::val	ArduinoClock/Streaming.h	/^  float val;$/;"	m	struct:_FLOAT	typeref:typename:float
_HEX	ArduinoClock/Streaming.h	/^#define _HEX(/;"	d
_OCT	ArduinoClock/Streaming.h	/^#define _OCT(/;"	d
_PointFlag	ArduinoClock/TTSDisplay.h	/^    uchar _PointFlag;  \/\/_PointFlag=1:the clock point on$/;"	m	class:TTSDisplay	typeref:typename:uchar
__TTSDISPLAY_H__	ArduinoClock/TTSDisplay.h	/^#define __TTSDISPLAY_H__$/;"	d
__TTSTEMP_H__	ArduinoClock/TTSTemp.h	/^#define __TTSTEMP_H__$/;"	d
__TTSTIME_H__	ArduinoClock/TTSTime.h	/^#define __TTSTIME_H__$/;"	d
__anon04348c590103	ArduinoClock/Utils.hpp	/^typedef enum {$/;"	g
__anon04348c590203	ArduinoClock/Utils.hpp	/^typedef enum {$/;"	g
__anon3c315ce40108	ArduinoClock/Button.hpp	/^typedef struct {$/;"	s
__anon3c315ce40108::click	ArduinoClock/Button.hpp	/^    bool click;$/;"	m	struct:__anon3c315ce40108	typeref:typename:bool
__anon3c315ce40108::isLongPress	ArduinoClock/Button.hpp	/^    bool isLongPress;$/;"	m	struct:__anon3c315ce40108	typeref:typename:bool
__anon3c315ce40108::key	ArduinoClock/Button.hpp	/^    Key key;$/;"	m	struct:__anon3c315ce40108	typeref:typename:Key
__anon3c315ce40108::longFn	ArduinoClock/Button.hpp	/^    void (*longFn)();$/;"	m	struct:__anon3c315ce40108	typeref:typename:void (*)()
__anon3c315ce40108::shortFn	ArduinoClock/Button.hpp	/^    void (*shortFn)();$/;"	m	struct:__anon3c315ce40108	typeref:typename:void (*)()
__anon3c315ce40108::time	ArduinoClock/Button.hpp	/^    unsigned long time;$/;"	m	struct:__anon3c315ce40108	typeref:typename:unsigned long
__anon8c66b3c90108	ArduinoClock/Timer.hpp	/^typedef struct {$/;"	s
__anon8c66b3c90108::leng	ArduinoClock/Timer.hpp	/^    unsigned long leng;$/;"	m	struct:__anon8c66b3c90108	typeref:typename:unsigned long
__anon8c66b3c90108::nextTime	ArduinoClock/Timer.hpp	/^    unsigned long nextTime;$/;"	m	struct:__anon8c66b3c90108	typeref:typename:unsigned long
__pin	ArduinoClock/TTSTemp.h	/^    int __pin;$/;"	m	class:TTSTemp	typeref:typename:int
_brightness	ArduinoClock/TTSDisplay.h	/^    uchar _brightness;$/;"	m	class:TTSDisplay	typeref:typename:uchar
base	ArduinoClock/Streaming.h	/^  int base;$/;"	m	struct:_BASED	typeref:typename:int
bcdToDec	ArduinoClock/TTSTime.cpp	/^uchar TTSTime::bcdToDec(uchar val) { return ((val \/ 16 * 10) + (val % 16)); }$/;"	f	class:TTSTime	typeref:typename:uchar
clear	ArduinoClock/TTSDisplay.cpp	/^void TTSDisplay::clear() {$/;"	f	class:TTSDisplay	typeref:typename:void
click	ArduinoClock/Button.hpp	/^    bool click;$/;"	m	struct:__anon3c315ce40108	typeref:typename:bool
coding	ArduinoClock/TTSDisplay.cpp	/^uchar TTSDisplay::coding(uchar DispData) {$/;"	f	class:TTSDisplay	typeref:typename:uchar
cout	ArduinoClock/Streaming.h	/^#define cout /;"	d
decToBcd	ArduinoClock/TTSTime.cpp	/^uchar TTSTime::decToBcd(uchar val) { return ((val \/ 10 * 16) + (val % 10)); }$/;"	f	class:TTSTime	typeref:typename:uchar
digits	ArduinoClock/Streaming.h	/^  int digits;$/;"	m	struct:_FLOAT	typeref:typename:int
display	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^static TTSDisplay display;$/;"	v	typeref:typename:TTSDisplay	file:
display	ArduinoClock/TTSDisplay.cpp	/^void TTSDisplay::display(uchar loca, uchar dta) {$/;"	f	class:TTSDisplay	typeref:typename:void
display	ArduinoClock/Utils.cpp	/^static TTSDisplay display;$/;"	v	typeref:typename:TTSDisplay	file:
dtaDisplay	ArduinoClock/TTSDisplay.h	/^    uchar dtaDisplay[4];$/;"	m	class:TTSDisplay	typeref:typename:uchar[4]
endl	ArduinoClock/Streaming.h	/^enum _EndLineCode { endl };$/;"	e	enum:_EndLineCode
get	ArduinoClock/TTSTemp.h	/^    int get()                                   \/\/ get temperature$/;"	f	class:TTSTemp	typeref:typename:int
getHour	ArduinoClock/TTSTime.cpp	/^uchar TTSTime::getHour() {$/;"	f	class:TTSTime	typeref:typename:uchar
getMin	ArduinoClock/TTSTime.cpp	/^uchar TTSTime::getMin() {$/;"	f	class:TTSTime	typeref:typename:uchar
getSec	ArduinoClock/TTSTime.cpp	/^uchar TTSTime::getSec() {$/;"	f	class:TTSTime	typeref:typename:uchar
getTime	ArduinoClock/TTSTime.cpp	/^void TTSTime::getTime(uchar *hour, uchar *min, uchar *sec) {$/;"	f	class:TTSTime	typeref:typename:void
getTime	ArduinoClock/TTSTime.cpp	/^void TTSTime::getTime(uchar *hour, uchar *min, uchar *sec, uchar *dayOfWeek, uchar *dayOfMonth, /;"	f	class:TTSTime	typeref:typename:void
hour	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^static unsigned char hour;$/;"	v	typeref:typename:unsigned char	file:
hour	/home/ngocpt/Work/AVRClock/ArduinoClock/HourEdit.cpp	/^static unsigned char hour;$/;"	v	typeref:typename:unsigned char	file:
hour	/home/ngocpt/Work/AVRClock/ArduinoClock/MinEdit.cpp	/^static unsigned char hour;$/;"	v	typeref:typename:unsigned char	file:
hour	/home/ngocpt/Work/AVRClock/ArduinoClock/MinutesEdit.cpp	/^static unsigned char hour;$/;"	v	typeref:typename:unsigned char	file:
hour	ArduinoClock/HourEdit.cpp	/^static unsigned char hour;$/;"	v	typeref:typename:unsigned char	file:
hour	ArduinoClock/MinEdit.cpp	/^static unsigned char hour;$/;"	v	typeref:typename:unsigned char	file:
hourBlink	/home/ngocpt/Work/AVRClock/ArduinoClock/HourEdit.cpp	/^static bool hourBlink = false;$/;"	v	typeref:typename:bool	file:
hourlyChime	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^static TimePoint hourlyChime[HOURLY_CHIME_SIZE];$/;"	v	typeref:typename:TimePoint[]	file:
indexSchedule	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^static size_t indexSchedule;$/;"	v	typeref:typename:size_t	file:
indexSchedule	ArduinoClock/Clock.cpp	/^static size_t indexSchedule;$/;"	v	typeref:typename:size_t	file:
indexState	/home/ngocpt/Work/AVRClock/ArduinoClock/StateManager.cpp	/^static unsigned char indexState = 0;$/;"	v	typeref:typename:unsigned char	file:
indexTimePoint	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^static unsigned char indexTimePoint;$/;"	v	typeref:typename:unsigned char	file:
isLongPress	ArduinoClock/Button.hpp	/^    bool isLongPress;$/;"	m	struct:__anon3c315ce40108	typeref:typename:bool
k1	ArduinoClock/Utils.hpp	/^    k1 = 9,$/;"	e	enum:__anon04348c590103
k2	ArduinoClock/Utils.hpp	/^    k2 = 10,$/;"	e	enum:__anon04348c590103
k3	ArduinoClock/Utils.hpp	/^    k3 = 11,$/;"	e	enum:__anon04348c590103
key	ArduinoClock/Button.hpp	/^    Key key;$/;"	m	struct:__anon3c315ce40108	typeref:typename:Key
lastUpdate	/home/ngocpt/Work/AVRClock/ArduinoClock/HourEdit.cpp	/^static unsigned long lastUpdate;$/;"	v	typeref:typename:unsigned long	file:
lastUpdate	/home/ngocpt/Work/AVRClock/ArduinoClock/MinEdit.cpp	/^static unsigned long lastUpdate;$/;"	v	typeref:typename:unsigned long	file:
lastUpdate	/home/ngocpt/Work/AVRClock/ArduinoClock/MinutesEdit.cpp	/^static unsigned long lastUpdate;$/;"	v	typeref:typename:unsigned long	file:
lastUpdate	ArduinoClock/HourEdit.cpp	/^static unsigned long lastUpdate;$/;"	v	typeref:typename:unsigned long	file:
lastUpdate	ArduinoClock/MinEdit.cpp	/^static unsigned long lastUpdate;$/;"	v	typeref:typename:unsigned long	file:
led1	ArduinoClock/Utils.hpp	/^    led1 = 2,$/;"	e	enum:__anon04348c590203
led2	ArduinoClock/Utils.hpp	/^    led2 = 3,$/;"	e	enum:__anon04348c590203
led3	ArduinoClock/Utils.hpp	/^    led3 = 4,$/;"	e	enum:__anon04348c590203
led4	ArduinoClock/Utils.hpp	/^    led4 = 5,$/;"	e	enum:__anon04348c590203
leng	ArduinoClock/Timer.hpp	/^    unsigned long leng;$/;"	m	struct:__anon8c66b3c90108	typeref:typename:unsigned long
lightLevel	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^static unsigned char lightLevel = 0x00;$/;"	v	typeref:typename:unsigned char	file:
lightLevel	ArduinoClock/Utils.cpp	/^static unsigned char lightLevel = 0x00;$/;"	v	typeref:typename:unsigned char	file:
longFn	ArduinoClock/Button.hpp	/^    void (*longFn)();$/;"	m	struct:__anon3c315ce40108	typeref:typename:void (*)()
maxLevel	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^static int maxLevel = 0x00;$/;"	v	typeref:typename:int	file:
maxLevel	ArduinoClock/Utils.cpp	/^static int maxLevel = 0x00;$/;"	v	typeref:typename:int	file:
min	/home/ngocpt/Work/AVRClock/ArduinoClock/HourEdit.cpp	/^static unsigned char min;$/;"	v	typeref:typename:unsigned char	file:
min	/home/ngocpt/Work/AVRClock/ArduinoClock/MinEdit.cpp	/^static unsigned char min;$/;"	v	typeref:typename:unsigned char	file:
min	/home/ngocpt/Work/AVRClock/ArduinoClock/MinutesEdit.cpp	/^static unsigned char min;$/;"	v	typeref:typename:unsigned char	file:
min	ArduinoClock/HourEdit.cpp	/^static unsigned char min;$/;"	v	typeref:typename:unsigned char	file:
min	ArduinoClock/MinEdit.cpp	/^static unsigned char min;$/;"	v	typeref:typename:unsigned char	file:
minLevel	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^static int minLevel = 0xff;$/;"	v	typeref:typename:int	file:
minLevel	ArduinoClock/Utils.cpp	/^static int minLevel = 0xff;$/;"	v	typeref:typename:int	file:
minutes	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^static unsigned char minutes;$/;"	v	typeref:typename:unsigned char	file:
minutes	/home/ngocpt/Work/AVRClock/ArduinoClock/HourEdit.cpp	/^static unsigned char minutes;$/;"	v	typeref:typename:unsigned char	file:
nextTime	ArduinoClock/Timer.hpp	/^    unsigned long nextTime;$/;"	m	struct:__anon8c66b3c90108	typeref:typename:unsigned long
nextTimePoint	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^static TimePoint nextTimePoint;$/;"	v	typeref:typename:TimePoint	file:
nextTimePoint	ArduinoClock/Clock.cpp	/^static TimePoint nextTimePoint;$/;"	v	typeref:typename:TimePoint	file:
num	ArduinoClock/TTSDisplay.cpp	/^void TTSDisplay::num(int dta) {$/;"	f	class:TTSDisplay	typeref:typename:void
operator <<	ArduinoClock/Streaming.h	/^inline Print &operator<<(Print &obj, _EndLineCode arg) {$/;"	f	typeref:typename:Print &
operator <<	ArduinoClock/Streaming.h	/^inline Print &operator<<(Print &obj, const _BASED &arg) {$/;"	f	typeref:typename:Print &
operator <<	ArduinoClock/Streaming.h	/^inline Print &operator<<(Print &obj, const _BYTE_CODE &arg) {$/;"	f	typeref:typename:Print &
operator <<	ArduinoClock/Streaming.h	/^inline Print &operator<<(Print &obj, const _FLOAT &arg) {$/;"	f	typeref:typename:Print &
operator <<	ArduinoClock/Streaming.h	/^inline Print &operator<<(Print &stream, T arg) {$/;"	f	typeref:typename:Print &
pointOff	ArduinoClock/TTSDisplay.cpp	/^void TTSDisplay::pointOff() {$/;"	f	class:TTSDisplay	typeref:typename:void
pointOn	ArduinoClock/TTSDisplay.cpp	/^void TTSDisplay::pointOn() {$/;"	f	class:TTSDisplay	typeref:typename:void
rangeLevel	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^static int rangeLevel = 0xffff;$/;"	v	typeref:typename:int	file:
rangeLevel	ArduinoClock/Utils.cpp	/^static int rangeLevel = 0xffff;$/;"	v	typeref:typename:int	file:
raw	ArduinoClock/TTSDisplay.cpp	/^void TTSDisplay::raw(uchar loca, uchar dta) {$/;"	f	class:TTSDisplay	typeref:typename:void
schedule	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^static TimePoint schedule[SCHEDULE_SIZE];$/;"	v	typeref:typename:TimePoint[]	file:
schedule	ArduinoClock/Clock.cpp	/^static TimePoint schedule[SCHEDULE_SIZE];$/;"	v	typeref:typename:TimePoint[]	file:
scheduleSize	/home/ngocpt/Work/AVRClock/ArduinoClock/Schedule.c	/^static unsigned char scheduleSize;$/;"	v	typeref:typename:unsigned char	file:
scheduleSize	/home/ngocpt/Work/AVRClock/ArduinoClock/Scheduler.c	/^static unsigned char scheduleSize;$/;"	v	typeref:typename:unsigned char	file:
scheduleTaskSize	/home/ngocpt/Work/AVRClock/ArduinoClock/Scheduler.c	/^static unsigned char scheduleTaskSize;$/;"	v	typeref:typename:unsigned char	file:
scheduleTaskSize	/home/ngocpt/Work/AVRClock/ArduinoClock/Scheduler.cpp	/^static unsigned char scheduleTaskSize;$/;"	v	typeref:typename:unsigned char	file:
scheduleTasks	/home/ngocpt/Work/AVRClock/ArduinoClock/Scheduler.c	/^static struct ScheduleTask *scheduleTasks;$/;"	v	typeref:struct:ScheduleTask *	file:
scheduleTasks	/home/ngocpt/Work/AVRClock/ArduinoClock/Scheduler.cpp	/^static struct ScheduleTask *scheduleTasks;$/;"	v	typeref:struct:ScheduleTask *	file:
scheduleTasks	/home/ngocpt/Work/AVRClock/ArduinoClock/Scheduler.cpp	/^static struct ScheduleTask* scheduleTasks;$/;"	v	typeref:struct:ScheduleTask *	file:
schedules	/home/ngocpt/Work/AVRClock/ArduinoClock/Schedule.c	/^static struct ScheduleTask *schedules;$/;"	v	typeref:struct:ScheduleTask *	file:
schedules	/home/ngocpt/Work/AVRClock/ArduinoClock/Scheduler.c	/^static struct ScheduleTask *schedules;$/;"	v	typeref:struct:ScheduleTask *	file:
set	ArduinoClock/TTSDisplay.cpp	/^void TTSDisplay::set(uchar brightness, uchar SetData, uchar SetAddr) {$/;"	f	class:TTSDisplay	typeref:typename:void
setTime	ArduinoClock/TTSTime.cpp	/^void TTSTime::setTime(uchar hour, uchar min, uchar sec) {$/;"	f	class:TTSTime	typeref:typename:void
setTime	ArduinoClock/TTSTime.cpp	/^void TTSTime::setTime(uchar hour, uchar min, uchar sec, uchar dayOfWeek, uchar dayOfMonth, uchar/;"	f	class:TTSTime	typeref:typename:void
shortFn	ArduinoClock/Button.hpp	/^    void (*shortFn)();$/;"	m	struct:__anon3c315ce40108	typeref:typename:void (*)()
sleep	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^    sleep,$/;"	e	enum:StateView	file:
sleep	ArduinoClock/Clock.cpp	/^    sleep,$/;"	e	enum:StateView	file:
start	ArduinoClock/TTSDisplay.cpp	/^void TTSDisplay::start(void) {$/;"	f	class:TTSDisplay	typeref:typename:void
stateSize	/home/ngocpt/Work/AVRClock/ArduinoClock/StateManager.cpp	/^static unsigned char stateSize = 0;$/;"	v	typeref:typename:unsigned char	file:
stateSize	/home/ngocpt/Work/AVRClock/ArduinoClock/StateManager.cpp	/^static unsigned char stateSize;$/;"	v	typeref:typename:unsigned char	file:
states	/home/ngocpt/Work/AVRClock/ArduinoClock/StateManager.cpp	/^static struct State states;$/;"	v	typeref:struct:State	file:
states	/home/ngocpt/Work/AVRClock/ArduinoClock/StateManager.cpp	/^static struct State* states = NULL;$/;"	v	typeref:struct:State *	file:
stop	ArduinoClock/TTSDisplay.cpp	/^void TTSDisplay::stop(void) {$/;"	f	class:TTSDisplay	typeref:typename:void
tabl	ArduinoClock/Streaming.h	/^#define tabl /;"	d
temp	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^static TTSTemp temp;$/;"	v	typeref:typename:TTSTemp	file:
temp	ArduinoClock/Utils.cpp	/^static TTSTemp temp;$/;"	v	typeref:typename:TTSTemp	file:
time	/home/ngocpt/Work/AVRClock/ArduinoClock/Utils.cpp	/^static TTSTime time;$/;"	v	typeref:typename:TTSTime	file:
time	ArduinoClock/Button.hpp	/^    unsigned long time;$/;"	m	struct:__anon3c315ce40108	typeref:typename:unsigned long
time	ArduinoClock/TTSDisplay.cpp	/^void TTSDisplay::time(uchar hour, uchar min) {$/;"	f	class:TTSDisplay	typeref:typename:void
time	ArduinoClock/Utils.cpp	/^static TTSTime time;$/;"	v	typeref:typename:TTSTime	file:
uchar	ArduinoClock/TTSDisplay.h	/^#define uchar /;"	d
uchar	ArduinoClock/TTSTime.h	/^#define uchar /;"	d
val	ArduinoClock/Streaming.h	/^  byte val;$/;"	m	struct:_BYTE_CODE	typeref:typename:byte
val	ArduinoClock/Streaming.h	/^  float val;$/;"	m	struct:_FLOAT	typeref:typename:float
val	ArduinoClock/Streaming.h	/^  long val;$/;"	m	struct:_BASED	typeref:typename:long
view	/home/ngocpt/Work/AVRClock/ArduinoClock/HourEdit.cpp	/^static bool view;$/;"	v	typeref:typename:bool	file:
view	/home/ngocpt/Work/AVRClock/ArduinoClock/MinEdit.cpp	/^static bool view;$/;"	v	typeref:typename:bool	file:
view	/home/ngocpt/Work/AVRClock/ArduinoClock/MinutesEdit.cpp	/^static bool view;$/;"	v	typeref:typename:bool	file:
view	ArduinoClock/HourEdit.cpp	/^static bool view;$/;"	v	typeref:typename:bool	file:
view	ArduinoClock/MinEdit.cpp	/^static bool view;$/;"	v	typeref:typename:bool	file:
viewTemp	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^    viewTemp,$/;"	e	enum:StateView	file:
viewTemp	ArduinoClock/Clock.cpp	/^    viewTemp,$/;"	e	enum:StateView	file:
viewTime	/home/ngocpt/Work/AVRClock/ArduinoClock/Clock.cpp	/^    viewTime,$/;"	e	enum:StateView	file:
viewTime	ArduinoClock/Clock.cpp	/^    viewTime,$/;"	e	enum:StateView	file:
writeByte	ArduinoClock/TTSDisplay.cpp	/^void TTSDisplay::writeByte(uchar wr_data) {$/;"	f	class:TTSDisplay	typeref:typename:void
